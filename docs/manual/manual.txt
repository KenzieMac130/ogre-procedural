Ogre Procedural Manual
======================

:Revision: Ogre Procedural 0.2 branch

== About this manual

This manual aims to give a global view over what is possible with Ogre Procedural.

If you need more detailed information about how to use a specific functionality, please refer to the doxygen doc (you can find it here : http://www.ogreprocedural.org/doc).

== How to use

=== Installing

.Precompiled SDK

If you got the precompiled SDK, just set the OgreProcedural_HOME environment variable to your SDK folder.

.Source package

These are the detailed steps in order to build the SDK :

- Make sure CMake and the Ogre3d SDK are present on your system.
- Open CMake, set the source directory as the root directory of Ogre Procedural, choose anything you want for the build directory.
- Click 'Add Entry'. Add the 'OGRE_HOME' variable (type=PATH), its value being the root folder of Ogre3d SDK.
- Click 'configure', then 'generate'
- Your project file is now ready to be used. Build the target 'INSTALL' in order to get a working SDK, which will be in the 'sdk' subfolder.

=== Configuring your project

1. If you don't use CMake in your project

- Setup your IDE to use OgreProcedural's 'include' and 'lib' subdirectories.
- Copy the dynamic libraries OgreProcedural and OgreProcedural_d to a directory where they can be seen by your main executable.

2. If you use CMake in your project

- Copy FindOgreProcedural.cmake to a location where your CMake can use it.
- Setup OgreProcedural_HOME (either as system environnement variable or CMake variable) to point to OgreProcedural's SDK folder.
- When OgreProcedural is found, OgreProcedural_INCLUDE_DIRS and OgreProcedural_LIBRARIES are defined as CMake variables.

=== Basic usage sample

[source,C++]
#include "Procedural.h"
// ...
Procedural::BoxGenerator().setSizeX(2.0).realizeMesh("myBox");

That's it.

It's the minimal use case of OgreProcedural, and it produces a box mesh. 
You can then instantiate an entity from this mesh, and add it to your scene.

Each class that produces a Mesh derives from MeshGenerator, so you fill it with arguments, and call realizeMesh() at the end to produce an Ogre Mesh.

== Mesh primitives

There are a few mesh primitives generators.

.Box

image::primitive_box.png[scale="50"]

.RoundedBox

image::primitive_roundedbox.png[scale="50"]

.Sphere

image::primitive_sphere.png[scale="50"]

.IcoSphere

image::primitive_icosphere.png[scale="50"]

Icosphere is visually quite close from Sphere, but has a quite different repartition of the triangles.

.Torus

image::primitive_torus.png[scale="50"]

.TorusKnot

image::primitive_torusknot.png[scale="50"]

.Cylinder

image::primitive_cylinder.png[scale="50"]

.Cone

image::primitive_cone.png[scale="50"]

.Tube

image::primitive_tube.png[scale="50"]

.Capsule

image::primitive_capsule.png[scale="50"]

== Shapes, paths and tracks

In Ogre Procedural, shapes, paths and tracks all are made of line connected points.

The difference between them is :

* Tracks are 1D
* Shapes are 2D
* Paths are 3D


=== Orientation and closedness

Both shapes, tracks and paths can be closed or not : if closed, there will be an automatic junction between the last point and the first point.

Shapes have an outside and an inside : you can define whether the left or the right side is the outside.
It also makes sense with non-closed shape (for example, when extruded, the outside corresponds to where the face normal heads).
There's also a function to guess where is the outside and where is the inside.

=== Splines

Splines are a few helper classes used to generate shapes or paths, by interpolating between a bunch of control points.

TIP: You can also generate a track by first generating a shape, then calling the method convertToTrack(). 
      Shape's X are used as keys and Y as values.

.Cubic Hermite Spline

This is often referred as 'Bezier Spline'.
With Cubic Hermite Spline, you can choose the points and the tangents of the curves that goes through control points.

image::spline_cubichermite.png[scale="50"]

[source,C++]
CubicHermiteSpline2().addPoint(Vector2(0,0), AT_CATMULL)
                     .addPoint(Vector2(1,0), AT_CATMULL)
                     .addPoint(Vector2(1,1), Vector2(0,2), Vector2(0,-2))
                     .addPoint(Vector2(2,1), AT_CATMULL)
                     .addPoint(2,0).addPoint(3,0)
                     .addPoint(3,1).addPoint(4,1).setNumSeg(16).realizeShape()

You can either define the tangents of your choice, as demonstrated for the 3rd point, or auto-generate them as Catmull-Rom spline, or even straight lines.

.Catmull-Rom Spline

It's a particular case of Cubic Hermite Spline, in which tangents are automatically calculated.
Note that its the equivalent of _Ogre::SimpleSpline_, and there's even a conversion function between the two.

image::spline_catmull.png[scale="50"]

[source,C++]
CatmullRomSpline2().addPoint(0,0).addPoint(1,0)
                   .addPoint(1,1).addPoint(2,1)
				   .addPoint(2,0).addPoint(3,0)
				   .addPoint(3,1).addPoint(4,1).realizeShape()

[source,C++]
CatmullRomSpline2().addPoint(0,0).addPoint(1,0)
                   .addPoint(1,1).addPoint(2,1)
				   .addPoint(2,0).addPoint(3,0)
				   .addPoint(3,1).addPoint(4,1).realizeShape()

.Kochanek Bartels Spline

Kochanek-Bartels spline is defined by control points and 3 parameters : tension, bias and continuity.

Here's a description of what they do :

[options="header"]
|=========================================
|Parameter  | +1              | -1
|Tension    |Tight            |Round
|Bias       |Post Shoot       |Pre shoot
|Continuity |Inverted corners |Box corners
|=========================================

image::spline_kochanekbartels.png[scale="50"]

.Rounded Corner Spline

This one consists in straight lines joining the control points, with corners replaced by circle arcs.

image::spline_roundedcorner.png[scale="50"]

=== Track specifics

Tracks are used to represent a variable that varies along a path or a shape.

For that reason, the keys of the track are defined relatively to the points in the main curve.

There are 3 different addressing modes :

* AM_ABSOLUTE_LINEIC : the key represents a distance from the beginning of the curve.
* AM_RELATIVE_LINEIC : the key represents a relative distance inside the [0;1] segment, 0 being the beginning and 1 the end of the curve.
* AM_POINT : the key represents the index of a point in the main curve.

[source,C++]
Track t = Track(Track::AM_RELATIVE_LINEIC).addKeyFrame(0,0).addKeyFrame(1.0,-1.0);

=== Shape specifics

==== 2D CSG

You can combine shapes together in order to produce new shapes, using boolean operations.
Technically, the output is a multishape, because it doesn't always resolve to a single line.

As an exemple, let's say we have these 2 shapes :

image::shape_booleansetup.png[scale="50"]

Supported boolean operations are :

* Union : the result contains everything inside A plus evertyhing inside B

image::shape_booleanunion.png[scale="50"]

* Intersection : the result contains everything that is inside A and B

image::shape_booleanintersection.png[scale="50"]

* Difference : the result contains everything that is in A but not in B

image::shape_booleandifference.png[scale="50"]

==== Thicken

A "thin" shape can be made "thick" by using the thicken operation.

.before 
image::shape_thick1.png[scale="50"] 

.after 
image::shape_thick2.png[scale="50"]

=== Triangulation

A constrained triangulation can be performed on a shape or a multishape. It means that points from the shape(s) are joined together to form triangles.

The algorithm used is Bowyer-Watson, which is an implementation of a Delaunay triangulation (Delaunay simply means that triangulation is 'best quality', ie has as few thin triangles as possible)

image::shape_triangulation.png[scale="50"] 

== Extrusion operations

=== Extruder

Extrusion is an operation that consists in creating a mesh from a shape moved along a path.

That operation is particularly well suited for roads, pipelines, pillars...

image::extruder_generic.png[scale="50"]

Extrusion can also be applied to a multishape.

image::extruder_multishape.png[scale="50"]

Special options are available to influence the way the mesh is created :

* Rotation Track

image::extruder_rotationtrack.png[scale="50"]

* Scale Track

image::extruder_scaletrack.png[scale="50"]

* Shape Texture Track

image::extruder_texturetrack.png[scale="50"]

=== Lathe

Lathe is an operation that takes a shape and rotates it around Y-axis to produce a mesh.

image::lathe_generic.png[scale="50"]

Lathe can also be restricted to a given angle range.

image::lathe_anglerange.png[scale="50"]